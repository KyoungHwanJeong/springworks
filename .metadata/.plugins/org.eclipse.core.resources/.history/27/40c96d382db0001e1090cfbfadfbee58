package com.khit.members.controller;

import java.util.List;

import javax.servlet.http.HttpSession;

import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;

import com.khit.members.dto.MemberDTO;
import com.khit.members.service.MemberService;

import lombok.AllArgsConstructor;
import lombok.extern.slf4j.Slf4j;

@Slf4j
@AllArgsConstructor	//생성자 주입
@RequestMapping("/member")
@Controller
public class MemberController {

	private MemberService memberService;
	
	//회원가입 폼
	@GetMapping("/join")
	public String joinForm() {
		return "/member/join";
	}
	
	//회원가입
	@PostMapping("/join")
	public String join(@ModelAttribute MemberDTO memberDTO) {
		log.info("memberDTO=" + memberDTO);
		
		//회원가입처리(저장)
		memberService.insert(memberDTO);
		return "/member/login";
	}
	
	//로그인 폼
	@GetMapping("/login")
	public String loginform() {
		
		return "/member/login";
	}
	
	//로그인세션
	@PostMapping("/login")
	public String login(@ModelAttribute MemberDTO memberDTO, 
			HttpSession session) {
		MemberDTO loginMember = memberService.login(memberDTO);
		if(loginMember != null) {	//로그인된 객체가 있으면 세션 발급
			session.setAttribute("sessionEmail", memberDTO.getEmail());
			return "main";
		}else {
			return "/member/login";
		}
	}
	
	//로그아웃
	@GetMapping("/logout")
	public String logout(HttpSession session) {
		session.invalidate();	//모든 세션 삭제
		return "redirect:/";
	}
	
	//회원 목록
	@GetMapping("/")
	public String getMemberList(Model model) {
		List<MemberDTO> memberDTOList = memberService.findAll();
		model.addAttribute("memberList", memberDTOList);

		return "/member/list";
	}
	
	//회원 상세보기
	@GetMapping
	public String getMember(@RequestParam("id") Long id,
			Model model) {
		MemberDTO memberDTO = memberService.findById(id);
		model.addAttribute("member", memberDTO);
		
		return "/member/detail";
	}
	
	//회원 삭제
	@GetMapping("/delete")
	public String delete(@RequestParam("id") Long id,
			HttpSession session) {
		memberService.delete(id);
		session.invalidate();
		
		return "redirect:/member/";
	}
	
	
	//회원 수정 (페이지 불러오기)
	@GetMapping("/update")
	public String updateForm(HttpSession session,
			Model model) {
		//세션을 가져와서 회원을 이메일(세션)로 검색하기
		String email = (String)session.getAttribute("sessionEmail");
		MemberDTO memberDTO = memberService.findByEmail();
		model.addAttribute("member", memberDTO);
		
		return "/member/update";
	}
}
